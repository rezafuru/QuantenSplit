datasets:
  ilsvrc2012:
    name: &dataset_name 'ilsvrc2012'
    type: 'ImageFolder'
    root: &root_dir !join [ '~/resources/datasets/', *dataset_name ]
    splits:
      train:
        dataset_id: &imagenet_train !join [ *dataset_name, '/train' ]
        params:
          root: !join [ *root_dir, '/train' ]
          transform_params:
            - type: 'RandomResizedCrop'
              params:
                size: &input_size [ 224, 224 ]
            - type: 'RandomHorizontalFlip'
              params:
                p: 0.5
            - &totensor
              type: 'ToTensor'
              params:
            - &normalize
              type: 'Normalize'
              params:
                mean: [ 0.485, 0.456, 0.406 ]
                std: [ 0.229, 0.224, 0.225 ]
      val:
        dataset_id: &imagenet_val !join [ *dataset_name, '/val' ]
        params:
          root: !join [ *root_dir, '/val' ]
          transform_params:
            - type: 'Resize'
              params:
                size: 256
            - type: 'CenterCrop'
              params:
                size: *input_size
            - *totensor
            - *normalize

models:
  lmbda: &lmbda 0.032
  distortion: &distortion 'MSELoss'
  teacher_model:
    name: &teacher_model_name 'get_timm_model'
    params:
      timm_model_name: &backbone_base 'swin_s3_tiny_224'
      no_classes: 1000
      reset_head: False
      pretrained: True
      assign_layer_names: False
      split_idx: -1
    experiment: !join [ *dataset_name, '-', *teacher_model_name ]
    ckpt: !join [ './resource/ckpt', *dataset_name, '/teacher/', 'swin-t', '.pt' ]
  student_model:
    name: 'franken_net'
    params:
      compression_module_config:
        name: 'FactorizedPriorModule'
        params:
          entropy_bottleneck_channels: &output_dim_analysis 48
          analysis_config:
            name: &analysis 'SimpleResidualAnalysisNetwork'
            params:
              in_ch: 3
              in_ch1: 48
              in_ch2: 64
              target_channels: *output_dim_analysis
          synthesis_config:
            name: &synthesis 'SynthesisNetworkSwinTransform'
            params:
              #              deconv_preconfig:
              #                name: '_0x2upsample2x1stride_deconv_1stage_norb_nogdn'
              #                params:
              #                  feature_size: 28
              #                  bottleneck_channels: *output_dim_analysis
              #                  output_dim_st1: 96
              #                  target_dim: 192
              bottleneck_channels: *output_dim_analysis
              target_dim: 192
              feature_size: 28
              window_sizes: [ 7 ]
              num_heads: [ 3 ]
              depths: [ 2 ]
              stoch_drop_rate: 0.05
              use_shortcut: True
              reconstruction_layer_config:
                name: 'SwinReconLayer'
                params:
                  embed_dim: 192
                  target_dim: 384
                  window_size: 7
                  feature_size: 28
                  depth: 2
                  num_heads: 4
                  tokenize_input: True
      backbone_module_config:
        name: *teacher_model_name
        params:
          timm_model_name: *backbone_base
          pretrained: True
          no_classes: 1000
          # replace first two stages with synthesis/analysis
          split_idx: 2
          assign_layer_names: False
          skip_embed: True
          reset_head: False
      circuit_name: &circuit_name 'alternating_rotation_circuit'
      predictors_configs:
        # dataset_name, model_name, model_config
        - [
          [ 'nutriment',
            'HybridCQPredictor', {
            no_classes: 10,
            hybrid_cq_node_config: {
              name: 'CirceptionHybridQNN',
              params: { in_features: &in_features 768,
                        circuit_name: *circuit_name,
                        use_residual: True }
            }
          } ],
          [ 'felidae',
            'HybridCQPredictor', {
            no_classes: 13,
            hybrid_cq_node_config: {
              name: 'CirceptionHybridQNN',
              # Resnet18 512 x 7 x 7
              params: { in_features: *in_features,
                        circuit_name: *circuit_name,
                        use_residual: True }
                #              c_embed_config: { name: 'SimpleCEmbed', params: {in_features: 512, out_features: &qubits 10 }},
                #              q_embed_config: { name: 'SimpleQEmbed', params: {qubits: *qubits, depth: 2 }},
            }
          } ],
          [ 'buildings',
            'HybridCQPredictor', {
            no_classes: 14,
            hybrid_cq_node_config: {
              name: 'CirceptionHybridQNN',
              params: { in_features: *in_features,
                        circuit_name: *circuit_name,
                        use_residual: True }
            }
          } ],
          [ 'vessels',
            'HybridCQPredictor', {
            no_classes: 23,
            hybrid_cq_node_config: {
              name: 'CirceptionHybridQNN',
              # Resnet18 512 x 7 x 7
              params: { in_features: *in_features,
                        circuit_name: *circuit_name,
                        use_residual: True }
                #              c_embed_config: { name: 'SimpleCEmbed', params: {in_features: 512, out_features: &qubits 10 }},
                #              q_embed_config: { name: 'SimpleQEmbed', params: {qubits: *qubits, depth: 2 }},
            }
          } ] ]
    experiment: &experiment_name !join [ *analysis, '-', *synthesis, '-', *lmbda, '-', *distortion, '-', *backbone_base ]
    ckpt: 'resources/weights/baseline_l032_vessels_buildings_nutriment_swin_s3_tiny_224.pt'
    ckpt_stage1: !join [ 'resources/weights/', *dataset_name, '/checkpoint',*experiment_name, '-stage1.pt' ]
train:
  log_freq: 500
  epoch_to_update: &epoch_to_update 3
  stage1:
    eval_metrics: [ 'Accuracy', 'Bpp' ]
    num_epochs: *epoch_to_update
    train_data_loader:
      dataset_id: *imagenet_train
      random_sample: True
      batch_size: 16
      num_workers: 4
      cache_output:
    val_data_loader:
      dataset_id: *imagenet_val
      random_sample: False
      batch_size: 128
      num_workers: 4
    teacher:
      sequential: [ 'patch_embed', 'pos_drop', 'layers.0', 'layers.1' ]
      frozen_modules: [ ]
      forward_hook:
        input: [ ]
        output: [ 'layers.1' ]
#      wrapper: 'DistributedDataParallel'
      requires_grad: False
    student:
      sequential: [ 'compression_module' ]
      frozen_modules: [ 'backbone' ]
      forward_hook:
        input: [ ]
        output: [ 'compression_module', 'compression_module.entropy_bottleneck' ]
      requires_grad: True
#      wrapper: 'DistributedDataParallel'
    enable_mp: True
    optimizer:
      type: 'Adam'
      params:
        lr: 0.001
      module_wise_params: [
        { params: { lr: 0.001 }, module: 'compression_module' },
      ]
    scheduler:
      type: 'ExponentialLR'
      params:
        # decay_factor = 1000
        # gamma = (1 / decay_factor) ** (1 / epochs)
        # lr last epoch = 1e-6
        gamma: 0.61054023
    criterion:
      type: 'GeneralizedCustomLoss'
      org_term:
        factor: 0.0
      sub_terms:
        layer1:
          criterion:
            type: 'MSELoss'
            params:
              reduction: 'sum'
          params:
            input:
              is_from_teacher: False
              module_path: 'compression_module'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'layers.1'
              io: 'output'
          factor: 1.0
        bpp:
          criterion:
            type: 'BppLossOrig'
            params:
              input_sizes: *input_size
              entropy_module_path: 'compression_module.entropy_bottleneck'
              reduction: 'sum'
          factor: *lmbda
test:
  # we don't particularly care about filesize/bpp here
  #  eval_metrics: [ 'accuracy-and-filesize' ]
  eval_metrics: [ 'Accuracy' ]
  #  eval_metrics: [ 'psnr' ]
  test_data_loader:
    dataset_id: *imagenet_val
    random_sample: False
    batch_size: 1
    num_workers: 1